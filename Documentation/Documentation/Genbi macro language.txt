! Genbi macro language (genbiL)
!! Basics
*_GenbiL_* is a language to automate the generation of test suites through Genbi. With _genbiL_, you can script all the actions that you do manually each time you want to generate your test suite such as open a CSV file for test cases, select the correct template, define the settings, generate and save your test suite.
_GenbiL_ has a standard approach for a script language. Each line of code, corresponding to an action, must end by a "_;_" and is ignoring cases. Textual parameters are written between simple quotes. All paths are relative to the executable that will generate the test suite (genbi.exe). The action must start by the definition of what will be impacted (Test cases, Test template, Settings or Test suite), followed by the action (Load, Save, Generate, ...) and parameters (file name, column). The descriptions here under explain all the valid actions by subject and the needed parameters.
For the moment it's not possible to record a macro when executing actions by yourself through the GUI (but later it will be). You can only create your script manually with any text editor.
To execute your test suite you've two options:
* Start normally genbi.exe and click on the menu on "Macro" then "Play ..." and select your genbiL script. A new window will open and displays all the actions executed by the macro.
* Start genbi.exe with a parameter corresponding to the name of your genbiL script. Only the new window for macro will open and displays all the actions executed by the macro.
{code:xml}
genbi.exe myScript.genbil
{code:xml}
!! Test cases
To specify that you want to place place an action on the Test Cases, start you code line by _case_ and follow it by one of the actions available:
* load
* rename
* move
* remove
!!! Load file
In addition to the action _load_ you must supply from where you'll want to load your test cases. The only option currecntly available is a CSV file, translated to _file_ in the genbiL language. You must also supply the location of your file just after as a parameter. 
Sample:
{code:xml}
case load file 'Relative Directory\myFileWithTestCases.csv';
{code:xml}
!!! Rename Column
In addition to the action _rename_ you must supply which column will be renamed and what's the new name. The correct syntax is _rename column 'old name' into 'new_name'_
Sample:
{code:xml}
case rename column 'dimensionY' into 'dimension';
{code:xml}
!!! Move Column
In addition to the action _move_ you must supply which column will be moved (based on its name) and if you want to move it left or right. The correct syntax is _move column 'old name' to [left|right]_. Note that left and right are considered as keywords and don't need simple quotes around them. If you want to move the column twice to the left, you'll need to repeat twice your code line.
Sample:
{code:xml}
case move column 'dimensionName' to left;
case move column 'dimensionName' to right;
{code:xml}
!!! Remove Column
In addition to the action _remove_ you must supply which column will be removed (based on its name). The correct syntax is _remove column 'column name'.
Sample:
{code:xml}
case remove column 'dimensionName';
{code:xml}
!! Test template
If you want to apply modifications to the test template selected to build your test suite, you've only one action available: _load_
!!! Load file or predefined
The load action has two options, or you load a predefined template embeded into genbi with the option _predefined_ or you load you own template with the option _file_. 
If you've chosen an embeded template you must specify the name of this template. The name is the name displayed in the drop-box without spaces!
{code:xml}
template load predefined 'ExistsDimension';
{code:xml}
If you've chosen the option _file_ then you need to specify the path to access it.
{code:xml}
template load file 'myTemplate.nbitt';
{code:xml}
!! Settings (defaults and references)
The settings actionable has a specific construction that will be fixed in next releases (or in the final version). The action is implicit and is an _add_. You must supply the action with an option with a keyword _reference_ or _default_ to specify what you want to use. If the option is a reference, you must provide its name else you need to specify if the default is for _sut_ (system-under-tests) or _assert_ with corresponding keywords. After you need to specify which feature of the setting will be added. Only connectionString has been tested but others should work. Then you need to specify the value that you want to set.
{code:xml}
settings reference 'referenceName' connectionString 'data source=localhost; initial catalog=myDb';
settings default assert connectionString 'data source=localhost; initial catalog=myDb';
{code:xml}
!! Test Suite
For the test suite you've two actions available _generate_ and _save_.
!!! Generate
_Generate_ will add the tests generated by the application of each test case on the template. If you want to use the _grouping_ option, just add it after your action, if not then don't add anything.
{code:xml}
suite generate;
suite generate grouping;
{code:xml}
!!! Save
The save action let you define the name of your new test suite generated by others actions. The save action is expecting one unique parameter, the name of your file.
{code:xml}
suite save 'mySuite.nbits';
{code:xml}
