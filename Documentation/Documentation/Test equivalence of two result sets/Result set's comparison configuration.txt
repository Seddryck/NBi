NBi tries to be smart when comparing two result sets. This analysis, performed by NBi, will help you to identify the differences (if any) between your result sets. Here under, you’ll also learn how to specify tolerances for some columns.
! Column’s roles
For each column you can specify a role. Currently, three roles are existing (Key, Value and Ignore).
!! Key
The key columns are useful to find corresponding rows between two result sets. Note that the key columns in a result set must be unique (especially in the result set defined in your constraint). If it’s not possible for you to specify a unique key in your expected result set, NBi will not help you too much finding the difference with another result set. 
Based on key columns, NBi will identify how many (and which) rows are expected but not found on the actual (system-under-test) result set –Missing Rows– and how many (and which) rows are not expected but found on the actual (system-under-test) result set –Unexpected rows–. 
To illustrate this, if you’re expecting to find two buyers A and B having respectively  bought for 100$ and 25$ then you should specify that the Supplier is the key. If your actual result set is A (100$) and C (55$), NBi will tell you that you’ve an unexpected row (c) and a missing row (B).
!! Value
The value column let NBi tells you that two rows matching keys have a difference but limited only the some values. So the row is available in both result sets but is not identical. 
To illustrate this, if you’re expecting to find two buyers A and B having respectively  bought for 100$ and 25$ then you should specify that the Supplier is the key and the amount is the value. If your result set is A (100$) and B (55$), NBi will tell you that you’ve no unexpected row, no missing row but two matching rows. Then NBi will also add that the second row has no matching values (55$ <> 25$).
You can also apply a tolerance to value columns.
!! Ignore
The column is simply ignored during the comparison. It means this column doesn’t influence the result of the comparison. 
This type can be useful with MDX queries returning a default measure if you don’t care about this value. Some queries also have a Timestamp column attached as last column and this kind of column is not relevant when comparing two result sets. 
! Column’s types
!! Text
This is the most common type for a column. The content of the cell is used during comparison. It means that values “10.0”,  “010” and “10” are considered as *different* when using this type. This is usually what you’ll use when specifying “Key”columns. Pay attention that the comparison is case-sensitive.
!! Numeric
To avoid comparison of textual content, you can use the “Numeric” type. The content of the cell is first converted to a numeric (decimal) value using the international format (a dot to separate the decimal part). It means that values “10.0”, “010” and “10” are considered as *equal* when using this type. This type is useful when you’ve “Value” columns.
!! DateTime
*version 1.2 and next*
The DateTime type has the same role than the “Numeric” type. The content of the cell is first converted to a DateTime value  using the international format (yyyy-mm-dd hh:mm:ss). 

To specify that your column is a dateTime column, just add the attribute 'type' with the value 'dateTime'
!!Boolean
*version 1.2 and next*
The boolean type has the same role than the “Numeric” type. The content of the cell is first converted to a boolean value. NBi understands "0" or "false" and "1" or "true" as boolean values. 

To specify that your column is a boolean column, just add the attribute 'type' with the value 'boolean'

! Tolerance
For the moment, the tolerance can only be assigned to column defined as a “Value and with a Type “Numeric”. The tolerance must be an absolute tolerance. For next releases, We’ve planned to support tolerance on “DateTime” columns and as a relative (%) value.
If you apply a tolerance of 10 to a numeric column, two rows (with same keys) will be considered as equal if the absolute difference between them is less or equal to 10.
This is especially helpful in Business Intelligence when you need to compare two queries and you don’t bother about rounding issues. Another case in Business Intelligence is also when you customers give you some hints about values expected in reports, they are usually a bit imprecise. 
! Xml syntax
NBi’s xml syntax  is to define “columns” tags in your equal constraint:
{code:xml}
<assert>
	<equalTo>
		<column ... />
		<column ... />
		<resultSet ... />
	</equalTo>
</assert>
{code:xml}
For each column you must specify the index of this column. Note that the first column has an index of 0 (and not 1). The index is a zero-based Index.
{code:xml}
<column  index="4" ... />
{code:xml}
Once the index is set, you must specify the role,  the type or the tolerance of the column.
{code:xml}
<column  index="0" role="key" type="text"/>
<column  index="1" role="ignore" />
<column  index="2" role="value" type="numeric" tolerance="0.001" />
{code:xml}
The example above describes a result set with three columns, where the first is the key (text), the second is useless for comparison purpose and the last is a numeric value where have decided to tolerate a difference of 0.001
You’re free to skip the definition of some columns, in this case NBi will use default values for types and roles. The example above can be written in a shortest way:
{code:xml}
<column  index="1" role="ignore" />
<column  index="2" tolerance="0.001" />
{code:xml}
It’s also possible to take some shortcuts and write directly in the equalTo tag the columns’ definition:
{code:xml}
<equalTo values="last" tolerance="0.001">
{code:xml}
This tag means that all columns are keys except the last which is a value column where a tolerance of 0.001 must applied.
If you want you can combine both notations. The column tag has always a precedence . It means that following notation (for a 6 column’s result set):
{code:xml}
<equalTo keys="all-except-last" tolerance="10">
	<column  index="2" role="ignore" />
	<column  index="3" tolerance="0.001" />
</equalTo>

{code:xml}
must be interpreted as columns 0, 1  and 4 are keys, column 2 is ignored, column 3 is a value column with a tolerance of 0.001 and finally column 5 is also a value column but with a tolerance of 10.