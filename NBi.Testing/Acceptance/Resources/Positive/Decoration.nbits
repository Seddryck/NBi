<?xml version="1.0" encoding="utf-8"?>
<testSuite name="The TestSuite" xmlns="http://NBi/TestSuite">
  <settings>
    <default apply-to="setup-cleanup">
      <connectionString>Data Source=(local)\SQL2022;Initial Catalog=AdventureWorks2022;Integrated Security=true</connectionString>
    </default>
    <default apply-to="system-under-test">
      <connectionString>Data Source=(local)\SQL2022;Initial Catalog=AdventureWorks2022;Integrated Security=true</connectionString>
    </default>
  </settings>
  <group name="Check decorations">
    <setup>
      <tasks run-once="true">
        <table-reset  name="Users"/>
        <table-reset  name="KeyDates"/>
      </tasks>
      <tasks>
        <table-load   name="Users"
							file ="Acceptance\Resources\Positive\Users.csv"
				/>
        <table-load   name="KeyDates"
							file ="Acceptance\Resources\Positive\KeyDates.csv"
				/>
      </tasks>
    </setup>
    <test name="decoration with condition service-running">
      <condition>
        <service-running name="MSSQL$SQL2017"/>
      </condition>
      <system-under-test>
        <result-set>
          <query>
            select
            [Name]
            , [KeyDate] as BirthDate
            from
            [Users]
            inner join
            [KeyDates] on
            [Users].[Id] = [KeyDates].[UserId]
            and [KeyDates].[Event] = 'Birth'
            where
            [Id] in (1,2)
          </query>
        </result-set>
      </system-under-test>
      <assert>
        <equal-to>
          <column index="1" type="text" role="value"/>
          <result-set>
            <row>
              <cell>Nikola Tesla</cell>
              <cell>1859-07-10</cell>
            </row>
            <row>
              <cell>Leonardo Da Vinci</cell>
              <cell>1456-04-15</cell>
            </row>
          </result-set>
        </equal-to>
      </assert>
      <cleanup>
        <table-reset name="Users"/>
      </cleanup>
    </test>
    <test name="decoration with condition service-running">
      <condition>
        <service-running name="MSSQL$SQL2017"/>
      </condition>
      <system-under-test>
        <result-set>
          <query>
            select
            count(*)
            from
            [KeyDates]
          </query>
        </result-set>
      </system-under-test>
      <assert>
        <equal-to>
          <result-set>
            <row>
              <cell>3</cell>
            </row>
          </result-set>
        </equal-to>
      </assert>
    </test>
  </group>
  <group name="Custom">
    <test name="decoration with custom condition (valid)">
      <condition>
        <custom assembly-path="NBi.Testing.dll" type="CustomConditionTrue"/>
      </condition>
      <system-under-test>
        <result-set>
          <row>
            <cell>OK</cell>
          </row>
        </result-set>
      </system-under-test>
      <assert>
        <equal-to>
          <result-set>
            <row>
              <cell>OK</cell>
            </row>
          </result-set>
        </equal-to>
      </assert>
    </test>
    <test name="decoration with custom condition (not succesful)">
      <condition>
        <custom assembly-path="NBi.Testing.dll" type="CustomConditionFalse"/>
      </condition>
      <system-under-test>
        <result-set>
          <row>
            <cell>OK</cell>
          </row>
        </result-set>
      </system-under-test>
      <assert>
        <equal-to>
          <result-set>
            <row>
              <cell>OK</cell>
            </row>
          </result-set>
        </equal-to>
      </assert>
    </test>
    <test name="decoration with custom command">
      <setup>
        <custom assembly-path="NBi.Testing.dll" type="CustomCommand"/>
      </setup>
      <system-under-test>
        <result-set>
          <row>
            <cell>OK</cell>
          </row>
        </result-set>
      </system-under-test>
      <assert>
        <equal-to>
          <result-set>
            <row>
              <cell>OK</cell>
            </row>
          </result-set>
        </equal-to>
      </assert>
    </test>
  </group>
</testSuite>