<?xml version="1.0" encoding="utf-8" ?>
<testSuite name="Acceptance Testing: query equalTo Csv" xmlns="http://NBi/TestSuite">
  <settings>
    <default apply-to="system-under-test">
      <connection-string>Data Source=(local)\SQL2022;Initial Catalog=AdventureWorks2019;User Id=sa;password=Password12!</connection-string>
    </default>
    <default apply-to="variable">
      <connection-string>Data Source=(local)\SQL2022;Initial Catalog=AdventureWorks2019;User Id=sa;password=Password12!</connection-string>
    </default>
  </settings>
  <variables>
    <variable name="year">
      <script language="c-sharp">DateTime.Now.Year + 1</script>
    </variable>
    <variable name="yearQuery">
      <query-scalar>
        select year(getdate())+1;
      </query-scalar>
    </variable>
    <variable name="twoDaysAgo">
      <script language="c-sharp">
        DateTime.Now.AddDays(-2)
      </script>
    </variable>
    <variable name="myVar">
      <script language="c-sharp">
        20
      </script>
    </variable>
  </variables>
  <test name="All-rows is doing the job for numeric info" uid="0001">
    <system-under-test>
      <result-set>
        <query>
          select
          OrderDate
          , SUM(TotalDue)
          from
          [Sales].[SalesOrderHeader]
          group by
          OrderDate
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <all-rows>
        <variable column-index="1">TotalDue</variable>
        <predicate name="TotalDue">
          <less-than>10000000</less-than>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="All-rows is doing the job with within-range" uid="0001">
    <system-under-test>
      <result-set>
        <query>
          select
          OrderDate
          , SUM(TotalDue)
          from
          [Sales].[SalesOrderHeader]
          group by
          OrderDate
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <all-rows>
        <variable column-index="1">TotalDue</variable>
        <predicate name="TotalDue">
          <within-range>(+)</within-range>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="All-rows also works for textual information" uid="0001">
    <system-under-test>
      <result-set>
        <query>
          select
          [Name], [CountryRegionCode]
          from
          [Sales].[SalesTerritory]
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <all-rows>
        <variable column-index="0">Name</variable>
        <predicate name="Name" type="text">
          <more-than>Afg</more-than>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="No-row with numeric information" uid="0001">
    <system-under-test>
      <result-set>
        <query>
          select
          OrderDate
          , SUM(TotalDue)
          from
          [Sales].[SalesOrderHeader]
          group by
          OrderDate
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <no-rows>
        <variable column-index="1">TotalDue</variable>
        <predicate name="TotalDue">
          <more-than>9000000</more-than>
        </predicate>
      </no-rows>
    </assert>
  </test>
  <test name="No-row with combination of numeric information" uid="0001">
    <system-under-test>
      <result-set>
        <query>
          select
          OrderDate
          , SUM(TotalDue)
          from
          [Sales].[SalesOrderHeader]
          group by
          OrderDate
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <no-rows>
        <combination operator="or">
          <predicate name="#1">
            <more-than>9000000</more-than>
          </predicate>
          <predicate name="#1">
            <less-than>1</less-than>
          </predicate>
        </combination>
      </no-rows>
    </assert>
  </test>
  <test name="All-rows with or-combination of numeric information and null" uid="0102">
    <system-under-test>
      <result-set>
        <query>
          select '2015-10-09', 60
          union all select '2015-10-10', null
          union all select '2015-10-11', 75
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <all-rows>
        <combination operator="or">
          <predicate operand="#1">
            <null/>
          </predicate>
          <predicate name="#1">
            <less-than>100</less-than>
          </predicate>
        </combination>
      </all-rows>
    </assert>
  </test>
  <test name="Single-row with and-combination of numeric information and null" uid="0102">
    <system-under-test>
      <result-set>
        <query>
          select '2015-10-09', 60
          union all select '2015-10-10', null
          union all select '2015-10-11', 75
          union all select '2015-10-12', 110
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <single-row>
        <combination operator="and">
          <predicate operand="#1">
            <null not="true"/>
          </predicate>
          <predicate name="#1">
            <more-than>100</more-than>
          </predicate>
        </combination>
      </single-row>
    </assert>
  </test>
  <test name="No-row also works for textual information" uid="0001">
    <system-under-test>
      <result-set>
        <query>
          select
          [Name], [CountryRegionCode]
          from
          [Sales].[SalesTerritory]
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <no-rows>
        <variable column-index="0">Name</variable>
        <predicate name="Name" type="text">
          <more-than>VN</more-than>
        </predicate>
      </no-rows>
    </assert>
  </test>
  <test name="Some-rows with numeric information" uid="0005">
    <system-under-test>
      <result-set>
        <query>
          select
          OrderDate
          , SUM(TotalDue) as TotalDue
          from
          [Sales].[SalesOrderHeader]
          group by
          OrderDate
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <some-rows>
        <predicate name="TotalDue">
          <more-than>1000</more-than>
        </predicate>
      </some-rows>
    </assert>
  </test>
  <test name="Single-row also works for textual information" uid="0006">
    <system-under-test>
      <result-set>
        <query>
          select
          [Name], [CountryRegionCode]
          from
          [Sales].[SalesTerritory]
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <single-row>
        <predicate name="#1" type="text">
          <equal>FR</equal>
        </predicate>
      </single-row>
    </assert>
  </test>
  <test name="With Predicate StartsWith" uid="0002">
    <system-under-test>
      <result-set>
        <query name="Select first departments">
          select [Name] from [HumanResources].[Department] where Name like 'E%' order by Name
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <all-rows>
        <variable column-index="0">Name</variable>
        <predicate name="Name" type="text">
          <starts-with>E</starts-with>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="With Predicate EndsWith" uid="0003">
    <system-under-test>
      <result-set>
        <query name="Select first departments">
          select [Name] from [HumanResources].[Department] where Name like '%e' order by Name
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <all-rows>
        <variable column-index="0">Name</variable>
        <predicate name="Name" type="text">
          <ends-with>e</ends-with>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="With Predicate contains" uid="0004">
    <system-under-test>
      <result-set>
        <query name="Select first departments">
          select [Name] from [HumanResources].[Department] where Name like '%en%' order by Name
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <all-rows>
        <variable column-index="0">Name</variable>
        <predicate name="Name" type="text">
          <contains ignore-case="true">en</contains>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="With Predicate match-regex" uid="0004">
    <system-under-test>
      <result-set>
        <query name="Select first departments">
          select [Name] from [HumanResources].[Department]
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <all-rows>
        <variable column-index="0">Name</variable>
        <predicate name="Name" type="text">
          <matches-regex>^[A-Z][A-z\s]+$</matches-regex>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="With Predicate NOT lower case" uid="00050">
    <system-under-test>
      <result-set>
        <query name="Select first departments">
          select [Name] from [HumanResources].[Department]
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <all-rows>
        <variable column-index="0">Name</variable>
        <predicate name="Name" type="text">
          <lower-case not="true"/>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="With Predicate is NOT on-the-hour" uid="00051">
    <system-under-test>
      <result-set>
        <query>
          select cast('2015-05-12 14:00:10' as datetime2)
          union all select cast('2017-04-12 12:10:00' as datetime2)
          union all select cast('2012-09-12 1:04:00' as datetime2)
          union all select cast('2013-05-01 00:00:01' as datetime2)
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <all-rows>
        <predicate name="#0" type="dateTime">
          <on-the-hour not="true"/>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="With Predicate is NOT modulo" uid="00052">
    <system-under-test>
      <result-set>
        <query>
          select 16 union all select 46 union all select 12 union all select 33
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <all-rows>
        <predicate name="#0">
          <modulo not="true" second-operand="15">0</modulo>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="With Predicate is NOT equal" uid="00053">
    <system-under-test>
      <result-set>
        <query>
          select 'User' union all select 'Developer' union all select 'Power user' union all select 'User'
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <all-rows>
        <predicate operand="#0" type="text">
          <equal not="true">Admin</equal>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="With Predicate is NOT any-of" uid="00054">
    <system-under-test>
      <result-set>
        <query>
          select 'Paris' union all select 'Brussels' union all select 'Toronto' union all select 'Madrid'
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <all-rows>
        <predicate name="#0" type="text">
          <any-of not="true">
            <item>Washington</item>
            <item>Chicago</item>
            <item>Seattle</item>
          </any-of>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="With Predicate is lower case" uid="0006">
    <system-under-test>
      <result-set>
        <query name="Select first departments">
          select lower([Name]) from [HumanResources].[Department]
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <all-rows>
        <variable column-index="0">Name</variable>
        <predicate name="Name" type="text">
          <lower-case/>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="With Predicate is upper-case" uid="0007">
    <system-under-test>
      <result-set>
        <query name="Select first departments">
          select upper([Name]) from [HumanResources].[Department]
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <all-rows>
        <alias column-index="0">Name</alias>
        <predicate name="Name" type="text">
          <upper-case/>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="With Predicate is modulo" uid="00070">
    <system-under-test>
      <result-set>
        <query>
          select 15 union all select 45 union all select 60 union all select 30
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <all-rows>
        <predicate name="#0">
          <modulo second-operand="15">0</modulo>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="With Predicate is on-the-hour" uid="00071">
    <system-under-test>
      <result-set>
        <query>
          select cast('2015-05-12 14:00:00' as datetime2)
          union all select cast('2017-04-12 12:00:00' as datetime2)
          union all select cast('2012-09-12 1:00:00' as datetime2)
          union all select cast('2013-05-01 00:00:00' as datetime2)
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <all-rows>
        <predicate name="#0" type="dateTime">
          <on-the-hour/>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="With Predicate matches numeric" uid="00072">
    <system-under-test>
      <result-set>
        <query>
          select '15' union all select '45.1'
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <all-rows>
        <predicate name="#0" type="text">
          <matches-numeric/>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="With Predicate matches-date" uid="00073">
    <system-under-test>
      <result-set>
        <query>
          select '2015-12-05'
          union all select '2015-12-25'
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <all-rows>
        <predicate name="#0" type="text">
          <matches-date/>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="With Predicate matches-date and french culture" uid="00074">
    <system-under-test>
      <result-set>
        <query>
          select '25/12/2015'
          union all select '05/12/2015'
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <all-rows>
        <predicate name="#0" type="text">
          <matches-date culture="fr-fr"/>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="With Predicate matches-date and french culture" uid="00075">
    <system-under-test>
      <result-set>
        <query>
          select 'Paris', 'France'
          union all select 'Brussels', 'Belgium'
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <all-rows>
        <predicate name="#0" type="text">
          <within-list>
            <item>Paris</item>
            <item>Amsterdam</item>
            <item>Brussels</item>
          </within-list>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="Use a c-sharp variable for the predicate with an integer" uid="00080">
    <system-under-test>
      <result-set>
        <query>
          select year(getdate()) as 'A'
          union all select year(getdate())-1
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <all-rows>
        <alias column-index="0">year</alias>
        <predicate name="year">
          <less-than>@year</less-than>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="Use a c-sharp variable for the predicate with a dateTime" uid="00081">
    <system-under-test>
      <resultSet>
        <query>
          <![CDATA[ select getdate() as Now, @TwoDaysAgo ]]>
          <parameter name="@TwoDaysAgo">@twoDaysAgo</parameter>
        </query>
      </resultSet>
    </system-under-test>
    <assert>
      <all-rows>
        <predicate operand="Now" type="dateTime">
          <more-than>@twoDaysAgo</more-than>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="Use a query-scalar variable for the predicate" uid="00082">
    <system-under-test>
      <result-set>
        <query>
          select year(getdate()) as 'A'
          union all select year(getdate())-1
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <all-rows>
        <alias column-index="0">year</alias>
        <predicate name="year">
          <less-than>@yearQuery</less-than>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="Use a variable and combine predicates" uid="00083">
    <system-under-test>
      <result-set>
        <query>
          select year(getdate()) as 'A', 'alpha' as 'B'
          union all select year(getdate())-1, 'BETA' as 'C'
          union all select year(getdate())+1, 'GAMMA' as 'C'
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <all-rows>
        <alias column-index="0">year</alias>
        <combination operator="or">
          <predicate name="year">
            <less-than>@year</less-than>
          </predicate>
          <predicate name="B" type="text">
            <upper-case/>
          </predicate>
        </combination>
      </all-rows>
    </assert>
  </test>
  <test name="Switch between type for variable" uid="0009">
    <system-under-test>
      <result-set>
        <query>
          select cast(year(getdate())+1 as varchar(4)) + 'XYZ' as 'A'
          union all select cast(year(getdate())+1 as varchar(4)) + 'ABC' as 'A'
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <all-rows>
        <alias column-index="0">text</alias>
        <predicate name="text" type="text">
          <starts-with>@year</starts-with>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="No-row with numeric informations mixing expression, column name, column index and alias" uid="0010">
    <system-under-test>
      <result-set>
        <query
					connection-string="Data Source=(local)\SQL2022;Initial Catalog=AdventureWorks2019;User Id=sa;password=Password12!"
				>
          select 10 as 'A' ,11 as 'B', 12 as 'C'
          union all select 5,6,7
          union all select 7,8,9
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <no-rows>
        <alias column-index="1">t</alias>
        <expression name="TotalDue">t * [#0] * [C]</expression>
        <predicate name="TotalDue">
          <more-than>10000</more-than>
        </predicate>
      </no-rows>
    </assert>
  </test>
  <test name="No-row with numeric informations mixing expression, column name, column index and variable" uid="0011">
    <system-under-test>
      <result-set>
        <query
					connection-string="Data Source=(local)\SQL2022;Initial Catalog=AdventureWorks2019;User Id=sa;password=Password12!"
				>
          select 10 as 'A' ,11 as 'B', 12 as 'C'
          union all select 5,6,7
          union all select 7,8,9
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <no-rows>
        <expression name="TotalDue">[@myVar] * [#0] * [C]</expression>
        <predicate name="TotalDue">
          <more-than>10000</more-than>
        </predicate>
      </no-rows>
    </assert>
  </test>
  <test name="No-row with numeric informations using multiple expressions" uid="0012">
    <system-under-test>
      <result-set>
        <query
					connection-string="Data Source=(local)\SQL2022;Initial Catalog=AdventureWorks2019;User Id=sa;password=Password12!"
				>
          select 10 as 'A' ,11 as 'B', 12 as 'C'
          union all select 5,6,7
          union all select 7,8,9
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <no-rows>
        <expression name="Partial">[A] * [B]</expression>
        <expression name="TotalDue">[Partial] * [C]</expression>
        <predicate name="TotalDue">
          <more-than>10000</more-than>
        </predicate>
      </no-rows>
    </assert>
  </test>
  <test name="all-rows with dateTime informations using an expression based on native functions" uid="0140">
    <system-under-test>
      <result-set>
        <query
					connection-string="Data Source=(local)\SQL2022;Initial Catalog=AdventureWorks2019;User Id=sa;password=Password12!"
				>
          select '2019-10-01 06:00:00' as A, '2019-09-30 04:47:00' as 'B', 12 as 'C'
          union all select '2019-10-01 23:00:00', '2019-10-01 04:42:00' as 'B',7
          union all select '2019-10-02 02:00:00', '2019-10-01 04:42:00' as 'B',9
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <all-rows>
        <expression name="createdTime">
          <script language="native">
            [B] | utc-to-local(Brussels)
          </script>
        </expression>
        <expression name="deadLine">
          <script language="native">
            [A] | utc-to-local(Brussels) | dateTime-to-date | dateTime-to-previous-day | dateTime-to-set-time(07:00:00)
          </script>
        </expression>
        <expression name="check">
          <![CDATA[[createdTime]<[deadLine]]]>
        </expression>
        <predicate name="check" type="boolean">
          <true/>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="all-rows with dateTime informations using an expression based on native functions using a parameter coming from the context" uid="0140">
    <system-under-test>
      <result-set>
        <query
					connection-string="Data Source=(local)\SQL2022;Initial Catalog=AdventureWorks2019;User Id=sa;password=Password12!"
				>
          select '2019-10-01 06:00:00' as Ref, '07:00:00' as MaxTime, '2019-10-01 06:47:00' as Effective
          union all select '2019-10-01 22:15:00', '23:00:00', '2019-10-01 22:42:00'
          union all select '2019-10-02 02:45:00', '03:00:00', '2019-10-02 02:48:00'
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <all-rows>
        <expression name="deadLine">
          <script language="native">
            [Ref] | dateTime-to-set-time([MaxTime])
          </script>
        </expression>
        <expression name="shortLine">
          <script language="native">
            [deadLine] | dateTime-to-add(01:00:00, -1)
          </script>
        </expression>
        <combination operator="and">
          <predicate name="deadLine" type="dateTime">
            <more-than>[Effective]</more-than>
          </predicate>
          <predicate name="shortLine" type="dateTime">
            <less-than>[Effective]</less-than>
          </predicate>
        </combination>
      </all-rows>
    </assert>
  </test>
  <test name="No-row with textual informations direct column name for predicate" uid="0011">
    <system-under-test>
      <result-set>
        <query
					connection-string="Data Source=(local)\SQL2022;Initial Catalog=AdventureWorks2019;User Id=sa;password=Password12!"
				>
          select 'A' as 'Col1'
          union all select 'B'
          union all select 'C'
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <no-rows>
        <predicate name="[Col1]" type="text">
          <lower-case/>
        </predicate>
      </no-rows>
    </assert>
  </test>
  <test name="Combination 'and' and any-of" uid="0101">
    <system-under-test>
      <resultSet>
        <row>
          <cell>F</cell>
          <cell>366</cell>
        </row>
        <row>
          <cell>M</cell>
          <cell>1015</cell>
        </row>
        <row>
          <cell>F</cell>
          <cell>1521</cell>
        </row>
        <row>
          <cell>M</cell>
          <cell>894</cell>
        </row>
      </resultSet>
    </system-under-test>
    <assert>
      <all-rows>
        <combination operator="and">
          <predicate operand="#0" type="text">
            <any-of>
              <item>M</item>
              <item>F</item>
            </any-of>
          </predicate>
          <predicate operand="#1">
            <less-than>1800</less-than>
          </predicate>
          <predicate operand="#1">
            <within-range>[200;2000]</within-range>
          </predicate>
        </combination>
      </all-rows>
    </assert>
  </test>
</testSuite>
