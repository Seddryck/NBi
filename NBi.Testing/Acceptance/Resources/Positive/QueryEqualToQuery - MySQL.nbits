<?xml version="1.0" encoding="utf-8" ?>
<testSuite name="Acceptance Testing: query equal-to query" xmlns="http://NBi/TestSuite">
  <settings>
    <default apply-to="system-under-test">
      <connectionString>Driver={MySQL ODBC 5.3 ANSI Driver};Server=eu-cdbr-azure-west-d.cloudapp.net;User=bdfdabafa6c4ff;password=562d3996</connectionString>
    </default>
    <default apply-to="assert">
      <connectionString>Data Source=(local)\SQL2019;Initial Catalog=AdventureWorks2019;User Id=sa;password=Password12!</connectionString>
    </default>
  </settings>
  <test name="'Reseller Order Count' by year before 2006" uid="0001">
    <condition>
      <service-running name="MSOLAP$SQL2017"/>
    </condition>
    <system-under-test>
      <result-set>
        <query name="MDX Except" connectionString="Provider=MSOLAP.4;Data Source=(local)\SQL2019;Initial Catalog='Adventure Works DW 2012';localeidentifier=1049">
          WITH MEMBER
          [Measures].[Reseller Order Count Divided by 7]
          AS
          [Measures].[Reseller Order Count]/7
          SELECT
          [Measures].[Reseller Order Count Divided by 7] ON 0,
          EXCEPT({[Date].[Calendar Year].Children},{[Date].[Calendar Year].[CY 2010]}) ON 1
          FROM
          [Adventure Works]
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <equal-to>
        <column index="0" role="key" type="text"/>
        <column index="1" role="value" type="numeric" tolerance="0.01"/>
        <query>
          SELECT 'CY 2005', 366.0/7
          UNION ALL SELECT 'CY 2006', 1015.0/7
          UNION ALL SELECT 'CY 2007', 1521.0/7
          UNION ALL SELECT 'CY 2008', 894.0/7
          UNION ALL SELECT 'CY 2009', NULL
        </query>
      </equal-to>
    </assert>
  </test>
  <test name="'Reseller Order Count' by year before 2006" uid="0001" ignore="false">
    <condition>
      <service-running name="MSOLAP$SQL2017"/>
    </condition>
    <system-under-test>
      <result-set>
        <query name="MDX Except" connectionString="Provider=MSOLAP.4;Data Source=(local)\SQL2019;Initial Catalog='Adventure Works DW 2012';localeidentifier=1049">
          select
          [Measures].[Internet Order Count] on 0,
          [Date].[Date].Children  on 1
          from
          [Adventure Works]
        </query>
      </result-set>
    </system-under-test>
    <assert>
      <equal-to>
        <query connectionString="Provider=MSOLAP.4;Data Source=(local)\SQL2019;Initial Catalog='Adventure Works DW 2012';localeidentifier=1049">
          select
          [Measures].[Internet Order Count] on 0,
          [Date].[Date].Children  on 1
          from
          [Adventure Works]
        </query>
      </equal-to>
    </assert>
  </test>
  <group name="group">
    <test name="Test Select 1" uid="0001">
      <category>Shared</category>
      <system-under-test>
        <result-set>
          <query>
            <![CDATA[ SELECT 'OK' ]]>
          </query>
        </result-set>
      </system-under-test>
      <assert>
        <equal-to>
          <resultSet>
            <row>
              <cell>OK</cell>
            </row>
          </resultSet>
        </equal-to>
      </assert>
    </test>
    <group name="group">
      <test name="Test Select 1" uid="0001">
        <category>Shared</category>
        <system-under-test>
          <result-set>
            <query>
              <![CDATA[ SELECT 'OK' ]]>
            </query>
          </result-set>
        </system-under-test>
        <assert>
          <equal-to>
            <resultSet>
              <row>
                <cell>OK</cell>
              </row>
            </resultSet>
          </equal-to>
        </assert>
      </test>
      <group name="group">
        <test name="Test Select 1" uid="0001">
          <category>Shared</category>
          <system-under-test>
            <result-set>
              <query>
                <![CDATA[ SELECT 'OK' ]]>
              </query>
            </result-set>
          </system-under-test>
          <assert>
            <equal-to>
              <resultSet>
                <row>
                  <cell>OK</cell>
                </row>
              </resultSet>
            </equal-to>
          </assert>
        </test>
      </group>
    </group>
  </group>
  <group name="Non Text Keys">
    <test name="Keys as Date">
      <system-under-test>
        <result-set>
          <query>
            <![CDATA[
									select cast('2015-12-17' as date) as `key`, 100.0 as `value`
                  union all select cast('2015-12-18' as date) as `key`, 77 as `value`
	              ]]>
          </query>
        </result-set>
      </system-under-test>
      <assert>
        <equal-to>
          <column index="0" role="key" type="dateTime"/>
          <query>
            <![CDATA[
									select cast('17/12/2015' as varchar(10)) as [key], 100.0 as [value]
                  union all select cast('18/12/2015' as varchar(10)) as [key], 77 as [value]
	              ]]>
          </query>
        </equal-to>
      </assert>
    </test>
    <test name="Keys as DateTime">
      <system-under-test>
        <result-set>
          <query>
            <![CDATA[
									select cast('2015-12-01 08:16:52' as datetime) as `key`, 100.0 as `value`
                  union all select cast('2015-12-02 08:45:00' as datetime) as `key`, 77 as `value`
	              ]]>
          </query>
        </result-set>
      </system-under-test>
      <assert>
        <equal-to>
          <column index="0" role="key" type="dateTime"/>
          <query>
            <![CDATA[
									select cast('12/1/2015 08:16:52' as varchar(20)) as [key], 100.0 as [value]
                  union all select cast('12/2/2015 08:45' as varchar(20)) as [key], 77 as [value]
	              ]]>
          </query>
        </equal-to>
      </assert>
    </test>
    <test name="Keys as Numeric">
      <system-under-test>
        <result-set>
          <query>
            <![CDATA[
									select cast(57 as unsigned) as `key`, 100.0 as `value`
                  union all select cast(58 as unsigned) as `key`, 77 as `value`
	              ]]>
          </query>
        </result-set>
      </system-under-test>
      <assert>
        <equal-to>
          <column index="0" role="key" type="numeric"/>
          <query>
            <![CDATA[
									select cast(57 as tinyint) as [key], 100.0 as [value]
                  union all select cast(58 as tinyint) as [key], 77 as [value]
	              ]]>
          </query>
        </equal-to>
      </assert>
    </test>
    <test name="Keys as Boolean">
      <system-under-test>
        <result-set>
          <query>
            <![CDATA[
									select cast(1 as unsigned) as `key`, 100.0 as `value`
                  union all select cast(0 as unsigned) as `key`, 77 as `value`
	              ]]>
          </query>
        </result-set>
      </system-under-test>
      <assert>
        <equal-to>
          <column index="0" role="key" type="boolean"/>
          <query>
            <![CDATA[
									select cast('true' as varchar(10)) as [key], 100.0 as  [value]
                  union all select cast('no' as varchar(10)) as [key], 77 as  [value]
	              ]]>
          </query>
        </equal-to>
      </assert>
    </test>
  </group>
  <group name="Connection strings">
    <test name="Sql Native vs ODBC">
      <system-under-test>
        <result-set>
          <query connectionString="Data Source=(local)\SQL2019;Initial Catalog=AdventureWorks2019;User Id=sa;password=Password12!">
            select 'OK';
          </query>
        </result-set>
      </system-under-test>
      <assert>
        <equal-to>
          <query connectionString="Driver={ODBC Driver 13 for SQL Server};Server=tcp:.\SQL2017,1433;Database=AdventureWorks2019;Uid=sa;Pwd=Password12!;Encrypt=yes;TrustServerCertificate=yes;Connection Timeout=30;">
            select 'OK';
          </query>
        </equal-to>
      </assert>
    </test>
    <test name="Sql Native vs OLEDB">
      <system-under-test>
        <result-set>
          <query connectionString="Data Source=(local)\SQL2019;Initial Catalog=AdventureWorks2019;User Id=sa;password=Password12!">
            select 'OK';
          </query>
        </result-set>
      </system-under-test>
      <assert>
        <equal-to>
          <query connectionString="Provider=SQLNCLI11;Server=.\SQL2017;Database=AdventureWorks2019;UId=sa;Pwd=Password12!;">
            select 'OK';
          </query>
        </equal-to>
      </assert>
    </test>
  </group>
  <group name="Transformers">
    <test name="CSharp dateTime to string">
      <system-under-test>
        <result-set>
          <query>
            select '10.2016' union all select '11.2016'
          </query>
        </result-set>
      </system-under-test>
      <assert>
        <equal-to>
          <column index="0" role="key" type="text">
            <transformation original-type="dateTime">String.Format("{0:00}.{1}", value.Month, value.Year)</transformation>
          </column>
          <query>
            select cast('2016-10-10' as DateTime) union all select cast('2016-11-22' as DateTime)
          </query>
        </equal-to>
      </assert>
    </test>
    <test name="CSharp string to string and decimal to decimal">
      <system-under-test>
        <result-set>
          <query>
            select '10.2016', 121 union all select '11.2016',242
          </query>
        </result-set>
      </system-under-test>
      <assert>
        <equal-to>
          <column index="0" role="key" type="text">
            <transformation original-type="text">value.Substring(5,2) + "." + value.Substring(0,4)</transformation>
          </column>
          <column index="1" role="value" type="numeric">
            <transformation original-type="numeric">value * Convert.ToDecimal(1.21)</transformation>
          </column>
          <query>
            select '2016.10', 100 union all select '2016.11', 200
          </query>
        </equal-to>
      </assert>
    </test>
    <test name="CSharp string to string and decimal to decimal (with Tolerance)">
      <system-under-test>
        <result-set>
          <query>
            select '10.2016', 121 union all select '11.2016',242
          </query>
        </result-set>
      </system-under-test>
      <assert>
        <equal-to>
          <column index="0" role="key" type="text">
            <transformation original-type="text">value.Substring(5,2) + "." + value.Substring(0,4)</transformation>
          </column>
          <column index="1" role="value" type="numeric" tolerance="10%">
            <transformation original-type="numeric">value * Convert.ToDecimal(1.21)</transformation>
          </column>
          <query>
            select '2016.10', 100 union all select '2016.11', 210
          </query>
        </equal-to>
      </assert>
    </test>
    <test name="NCalc decimal to decimal">
      <system-under-test>
        <result-set>
          <query>
            select '10.2016', cast(121 as decimal(10,3)) union all select '11.2016', cast(242 as decimal(10,3))
          </query>
        </result-set>
      </system-under-test>
      <assert>
        <equal-to>
          <column index="0" role="key" type="text"/>
          <column index="1" role="value" type="numeric">
            <transformation language="ncalc" original-type="numeric">value *1.21</transformation>
          </column>
          <query>
            select '10.2016', 100 union all select '11.2016', 200
          </query>
        </equal-to>
      </assert>
    </test>
    <test name="NCalc float to decimal">
      <system-under-test>
        <result-set>
          <query>
            select '10.2016', cast(121 as decimal) union all select '11.2016', cast(242 as decimal)
          </query>
        </result-set>
      </system-under-test>
      <assert>
        <equal-to>
          <column index="0" role="key" type="text"/>
          <column index="1" role="value" type="numeric">
            <transformation language="ncalc" original-type="numeric">value *1.21</transformation>
          </column>
          <query>
            select '10.2016', 100 union all select '11.2016', 200
          </query>
        </equal-to>
      </assert>
    </test>
    <test name="Format float and date">
      <system-under-test>
        <result-set>
          <query>
            select '10.2016', '0121.00' union all select '11.2016', '0242.00'
          </query>
        </result-set>
      </system-under-test>
      <assert>
        <equal-to>
          <column index="0" role="key" type="text">
            <transformation language="format" original-type="dateTime">MM.yyyy</transformation>
          </column>
          <column index="1" role="value" type="numeric">
            <transformation language="format" original-type="numeric">0000.00</transformation>
          </column>
          <query>
            select cast('2016-10-01' as DateTime), cast(121 as float) union all select cast('2016-11-01' as DateTime), cast(242 as float)
          </query>
        </equal-to>
      </assert>
    </test>
  </group>
  <group name="Single row queries">
    <test name="Text, numeric, bool, dateTime, Text">
      <system-under-test>
        <result-set>
          <query>
            select 'alpha', '10.250', 'true', '2016-12-10', 'beta'
          </query>
        </result-set>
      </system-under-test>
      <assert>
        <equal-to behavior="single-row" values-default-type="text">
          <column index="1" role="value" type="numeric"/>
          <column index="2" role="value" type="boolean"/>
          <column index="3" role="value" type="dateTime"/>
          <query>
            select 'alpha', cast(10.25 as float) , cast(1 as bit), cast('2016-12-10' as DateTime), 'beta'
          </query>
        </equal-to>
      </assert>
    </test>
  </group>
</testSuite>
