<?xml version="1.0" encoding="utf-8" ?>
<testSuite name="Acceptance Testing: query equalTo ResultSet" xmlns="http://NBi/TestSuite">
  <settings>
    <default apply-to="system-under-test">
      <connectionString>Provider=MSOLAP.4;Data Source=(local)\SQL2012;Initial Catalog='Adventure Works DW 2012';localeidentifier=1049</connectionString>
    </default>
    <reference name="SqlAdvenureWorks2012">
      <connectionString>Data Source=mhknbn2kdz.database.windows.net;Initial Catalog=AdventureWorks2012;User Id=sqlfamily;password=sqlf@m1ly</connectionString>
    </reference>
  </settings>
  <test name="'Reseller Orders' count, year by year, between 2005 and 2008" uid="0001">
    <system-under-test>
      <execution>
        <query name="MDX Except">
          SELECT
          [Measures].[Reseller Order Count] ON 0,
          {[Date].[Calendar Year].[CY 2005]:[Date].[Calendar Year].[CY 2008]} ON 1
          FROM
          [Adventure Works]
        </query>
      </execution>
    </system-under-test>
    <assert>
      <equalTo>
        <resultSet>
          <row>
            <cell>CY 2005</cell>
            <cell>366</cell>
          </row>
          <row>
            <cell>CY 2006</cell>
            <cell>1015</cell>
          </row>
          <row>
            <cell>CY 2007</cell>
            <cell>1521</cell>
          </row>
          <row>
            <cell>CY 2008</cell>
            <cell>894</cell>
          </row>
        </resultSet>
      </equalTo>
    </assert>
  </test>
  <test name="'Reseller Orders' count, year by year, between 2005 and 2008 with a tolerance of 5%" uid="0002">
    <system-under-test>
      <execution>
        <query name="MDX Except">
          SELECT
          [Measures].[Reseller Order Count] ON 0,
          {[Date].[Calendar Year].[CY 2005]:[Date].[Calendar Year].[CY 2008]} ON 1
          FROM
          [Adventure Works]
        </query>
      </execution>
    </system-under-test>
    <assert>
      <equalTo>
        <column index="1" role="value" type="numeric" tolerance="5%"/>
        <resultSet>
          <row>
            <cell>CY 2005</cell>
            <cell>350</cell>
          </row>
          <row>
            <cell>CY 2006</cell>
            <cell>1000</cell>
          </row>
          <row>
            <cell>CY 2007</cell>
            <cell>1500</cell>
          </row>
          <row>
            <cell>CY 2008</cell>
            <cell>900</cell>
          </row>
        </resultSet>
      </equalTo>
    </assert>
  </test>
  <test name="'Reseller Orders' count, year by year, between 2005 and 2008 with a rounding by step of 100" uid="0003">
    <system-under-test>
      <execution>
        <query name="MDX Except">
          SELECT
          [Measures].[Reseller Order Count] ON 0,
          {[Date].[Calendar Year].[CY 2005]:[Date].[Calendar Year].[CY 2008]} ON 1
          FROM
          [Adventure Works]
        </query>
      </execution>
    </system-under-test>
    <assert>
      <equalTo>
        <column index="1" role="value" type="numeric" rounding-style="floor" rounding-step="100"/>
        <resultSet>
          <row>
            <cell>CY 2005</cell>
            <cell>300</cell>
          </row>
          <row>
            <cell>CY 2006</cell>
            <cell>1000</cell>
          </row>
          <row>
            <cell>CY 2007</cell>
            <cell>1500</cell>
          </row>
          <row>
            <cell>CY 2008</cell>
            <cell>800</cell>
          </row>
        </resultSet>
      </equalTo>
    </assert>
  </test>
  <test name="'Reseller Orders' count, year by year, between 2005 and 2008 with intervals" uid="0003">
    <system-under-test>
      <execution>
        <query name="MDX Except">
          SELECT
          [Measures].[Reseller Order Count] ON 0,
          {[Date].[Calendar Year].[CY 2005]:[Date].[Calendar Year].[CY 2008]} ON 1
          FROM
          [Adventure Works]
        </query>
      </execution>
    </system-under-test>
    <assert>
      <equalTo>
        <column index="1" role="value" type="numeric" tolerance="10"/>
        <resultSet>
          <row>
            <cell>CY 2005</cell>
            <cell>[-INF;372[</cell>
          </row>
          <row>
            <cell>CY 2006</cell>
            <cell>[1000.5;1100.36]</cell>
          </row>
          <row>
            <cell>CY 2007</cell>
            <cell>]1500; +INF]</cell>
          </row>
          <row>
            <cell>CY 2008</cell>
            <cell>894</cell>
          </row>
        </resultSet>
      </equalTo>
    </assert>
  </test>
  <test name="'Reseller Orders' count, year by year, between 2005 and 2008 with intervals generic" uid="0003">
    <system-under-test>
      <execution>
        <query name="MDX Except">
          SELECT
          [Measures].[Reseller Order Count] ON 0,
          {[Date].[Calendar Year].[CY 2005]:[Date].[Calendar Year].[CY 2008]} ON 1
          FROM
          [Adventure Works]
        </query>
      </execution>
    </system-under-test>
    <assert>
      <equalTo>
        <column index="1" role="value" type="numeric" tolerance="10"/>
        <resultSet>
          <row>
            <cell>CY 2005</cell>
            <cell>360</cell>
          </row>
          <row>
            <cell>CY 2006</cell>
            <cell>(0+)</cell>
          </row>
          <row>
            <cell>CY 2007</cell>
            <cell>(>1500.25)</cell>
          </row>
          <row>
            <cell>CY 2008</cell>
            <cell>(absolutely-positive)</cell>
          </row>
        </resultSet>
      </equalTo>
    </assert>
  </test>
  <test name="Tolerance for dateTime fields" uid="0003">
    <system-under-test>
      <execution>
        <query name="Get two dates" connectionString="@SqlAdvenureWorks2012">
          SELECT
          'Id-1'
          , cast('2013-11-22' as datetime)
          union all
          SELECT
          'Id-2'
          , cast('2013-11-22 23:00:00' as datetime)
        </query>
      </execution>
    </system-under-test>
    <assert>
      <equalTo>
        <column index="1" role="value" type="dateTime" tolerance="01:00:00"/>
        <resultSet>
          <row>
            <cell>Id-1</cell>
            <cell>2013-11-21 23:00:00</cell>
          </row>
          <row>
            <cell>Id-2</cell>
            <cell>2013-11-23</cell>
          </row>
        </resultSet>
      </equalTo>
    </assert>
  </test>
  <test name="DAX Query with one column">
    <system-under-test>
      <execution>
        <query
					connectionString="Provider=MSOLAP.4;Data Source=(local)\SQL2012TABULAR;Initial Catalog='AdventureWorks Tabular Model SQL 2012';localeidentifier=1033"
				>
          EVALUATE
          CALCULATETABLE(
          VALUES('Product Subcategory'[Product Subcategory Name]),
          'Product Category'[Product Category Name] = "Bikes")
        </query>
      </execution>
    </system-under-test>
    <assert>
      <equalTo keys="first">
        <resultSet>
          <row>
            <cell>Mountain Bikes</cell>
          </row>
          <row>
            <cell>Road Bikes</cell>
          </row>
          <row>
            <cell>Touring Bikes</cell>
          </row>
        </resultSet>
      </equalTo>
    </assert>
  </test>
  <test name="DAX Query with two columns">
    <system-under-test>
      <execution>
        <query
					connectionString="Provider=MSOLAP.4;Data Source=(local)\SQL2012TABULAR;Initial Catalog='AdventureWorks Tabular Model SQL 2012';localeidentifier=1033"
				>
          evaluate(
          row(
          "MinOrderDate", min('Internet Sales'[OrderDateKey]) ,
          "MaxOrderDate", max('Internet Sales'[OrderDateKey]) )
          )
        </query>
      </execution>
    </system-under-test>
    <assert>
      <equalTo keys="all">
        <resultSet>
          <row>
            <cell>20050701</cell>
            <cell>20080731</cell>
          </row>
        </resultSet>
      </equalTo>
    </assert>
  </test>
  <test name="SQL Without Parameters">
    <system-under-test>
      <execution>
        <query
					connectionString="Data Source=mhknbn2kdz.database.windows.net;Initial Catalog=AdventureWorks2012;User Id=sqlfamily;password=sqlf@m1ly"
				>
          select
          [Name], [CountryRegionCode]
          from
          [Sales].[SalesTerritory]
          where
          [Group]='Europe'
        </query>
      </execution>
    </system-under-test>
    <assert>
      <equalTo keys="all">
        <resultSet>
          <row>
            <cell>France</cell>
            <cell>FR</cell>
          </row>
          <row>
            <cell>Germany</cell>
            <cell>DE</cell>
          </row>
          <row>
            <cell>United Kingdom</cell>
            <cell>GB</cell>
          </row>
        </resultSet>
      </equalTo>
    </assert>
  </test>
  <test name="SQL With Parameters">
    <system-under-test>
      <execution>
        <query
					connectionString="Data Source=mhknbn2kdz.database.windows.net;Initial Catalog=AdventureWorks2012;User Id=sqlfamily;password=sqlf@m1ly"
				>
          select
          [Name], [CountryRegionCode]
          from
          [Sales].[SalesTerritory]
          where
          [Group]=@Area
          <parameter name="@Area">Europe</parameter>
        </query>
      </execution>
    </system-under-test>
    <assert>
      <equalTo keys="all">
        <resultSet>
          <row>
            <cell>France</cell>
            <cell>FR</cell>
          </row>
          <row>
            <cell>Germany</cell>
            <cell>DE</cell>
          </row>
          <row>
            <cell>United Kingdom</cell>
            <cell>GB</cell>
          </row>
        </resultSet>
      </equalTo>
    </assert>
  </test>
  <test name="SQL With templates variables">
    <system-under-test>
      <execution>
        <query
					connectionString="Data Source=mhknbn2kdz.database.windows.net;Initial Catalog=AdventureWorks2012;User Id=sqlfamily;password=sqlf@m1ly"
				>
          select
          [Name], [CountryRegionCode]
          $cube_name$
          where
          [Group]='Europe'
          <variable name="cube_name"> from [Sales].[SalesTerritory] </variable>
        </query>
      </execution>
    </system-under-test>
    <assert>
      <equalTo keys="all">
        <resultSet>
          <row>
            <cell>France</cell>
            <cell>FR</cell>
          </row>
          <row>
            <cell>Germany</cell>
            <cell>DE</cell>
          </row>
          <row>
            <cell>United Kingdom</cell>
            <cell>GB</cell>
          </row>
        </resultSet>
      </equalTo>
    </assert>
  </test>
  <test name="Key with textual values">
    <system-under-test>
      <execution>
        <query
					connectionString="Data Source=mhknbn2kdz.database.windows.net;Initial Catalog=AdventureWorks2012;User Id=sqlfamily;password=sqlf@m1ly"
				>
          select
            'Cédric Charlier'
            , 'BI Architect'
            , 'Belgian'
            , 'Toronto'
            , 'Canada'
          union all
          select
            'Nikola Tesla'
            , 'Electrical engineering'
            , 'Serbian'
            , 'Smiljan'
            , 'Croatia'
        </query>
      </execution>
    </system-under-test>
    <assert>
      <equalTo keys="first" values-default-type="text">
        <resultSet>
          <row>
            <cell>Cédric Charlier</cell>
            <cell>BI Architect</cell>
            <cell>Belgian</cell>
            <cell>Toronto</cell>
            <cell>Canada</cell>
          </row>
          <row>
            <cell>Nikola Tesla</cell>
            <cell>Electrical engineering</cell>
            <cell>Serbian</cell>
            <cell>Smiljan</cell>
            <cell>Croatia</cell>
          </row>
        </resultSet>
      </equalTo>
    </assert>
  </test>

</testSuite>
